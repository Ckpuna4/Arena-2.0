import * as React from 'react';
import TabIndicator from '@material/react-tab-indicator';
// @ts-ignore
import { MDCTabFoundation } from '@material/tab/dist/mdc.tab';
import TabRipple, { TabRippleProps } from './TabRipple';
export interface TabProps extends React.HTMLProps<HTMLButtonElement> {
    active?: boolean;
    isFadingIndicator?: boolean;
    indicatorContent?: React.ReactNode;
    minWidth?: boolean;
    isMinWidthIndicator?: boolean;
    stacked?: boolean;
    previousIndicatorClientRect?: ClientRect;
}
interface MDCTabElementAttributes {
    'aria-selected': boolean;
    tabIndex?: number;
}
interface TabState extends MDCTabElementAttributes {
    classList: Set<string>;
    activateIndicator: boolean;
    previousIndicatorClientRect?: ClientRect;
}
export default class Tab extends React.Component<TabProps, TabState> {
    foundation?: MDCTabFoundation;
    tabRef: React.RefObject<HTMLButtonElement>;
    tabContentRef: React.RefObject<HTMLSpanElement>;
    tabIndicatorRef: React.RefObject<TabIndicator>;
    tabRippleRef: React.RefObject<TabRipple>;
    static defaultProps: Partial<TabProps>;
    state: TabState;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: TabProps): void;
    readonly classes: string;
    readonly adapter: {
        addClass: (className: string) => void;
        removeClass: (className: string) => void;
        hasClass: (className: string) => boolean;
        setAttr: (attr: "tabIndex" | "aria-selected", value?: string | boolean | undefined) => void;
        getOffsetLeft: () => number;
        getOffsetWidth: () => number;
        getContentOffsetLeft: () => number | null;
        getContentOffsetWidth: () => number | null;
        focus: () => void | null;
        activateIndicator: (previousIndicatorClientRect: ClientRect) => void;
        deactivateIndicator: () => void;
    };
    activate(computeIndicatorClientRect?: ClientRect | {}): void;
    deactivate(): void;
    computeIndicatorClientRect: () => ClientRect | undefined;
    computeDimensions: () => any;
    focus: () => void;
    onFocus: (e: React.FocusEvent<HTMLButtonElement>) => void;
    onBlur: (e: React.FocusEvent<HTMLButtonElement>) => void;
    render(): JSX.Element;
    renderIndicator(): JSX.Element;
}
export { TabRipple, Tab, TabRippleProps, };
