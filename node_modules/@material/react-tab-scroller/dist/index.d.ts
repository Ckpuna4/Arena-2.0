import * as React from 'react';
// @ts-ignore
import { MDCTabScrollerFoundation } from '@material/tab-scroller/dist/mdc.tabScroller';
export interface TabScrollerProps extends React.HTMLAttributes<HTMLDivElement> {
    alignStart?: boolean;
    alignEnd?: boolean;
    alignCenter?: boolean;
    className?: string;
}
interface TabScrollerState {
    classList: Set<string>;
    areaClassList: Set<string>;
    scrollAreaStyleProperty: React.CSSProperties;
    scrollContentStyleProperty: React.CSSProperties;
}
declare type ScrollerElementNames = 'scrollAreaStyleProperty' | 'scrollContentStyleProperty';
export default class TabScroller extends React.Component<TabScrollerProps, TabScrollerState> {
    areaElement: React.RefObject<HTMLDivElement>;
    contentElement: React.RefObject<HTMLDivElement>;
    foundation?: MDCTabScrollerFoundation;
    state: TabScrollerState;
    static defaultProps: Partial<TabScrollerProps>;
    componentDidMount(): void;
    componentWillUnmount(): void;
    readonly classes: string;
    setStyleToElement: (prop: string, value: string | boolean, elementStyleProperty: ScrollerElementNames) => void;
    readonly adapter: {
        eventTargetMatchesSelector: (evtTarget: HTMLDivElement, selector: string) => boolean;
        addClass: (className: string) => void;
        removeClass: (className: string) => void;
        addScrollAreaClass: (className: string) => void;
        setScrollAreaStyleProperty: (prop: string, value: string) => void;
        setScrollContentStyleProperty: (prop: string, value: string) => void;
        getScrollContentStyleValue: (propName: string) => string | null;
        setScrollAreaScrollLeft: (scrollX: number) => void;
        getScrollAreaScrollLeft: () => number | null;
        getScrollContentOffsetWidth: () => number | null;
        getScrollAreaOffsetWidth: () => number | null;
        computeScrollAreaClientRect: () => ClientRect | DOMRect | null;
        computeScrollContentClientRect: () => ClientRect | DOMRect | null;
        computeHorizontalScrollbarHeight: () => any;
    };
    getScrollPosition: () => any;
    getScrollContentWidth: () => number | null;
    incrementScroll: (scrollXIncrement: number) => void;
    scrollTo: (scrollX: number) => void;
    handleWheel_: (evt: React.WheelEvent<HTMLDivElement>) => void;
    handleTouchStart_: (evt: React.TouchEvent<HTMLDivElement>) => void;
    handlePointerDown_: (evt: React.PointerEvent<HTMLDivElement>) => void;
    handleMouseDown_: (evt: React.MouseEvent<HTMLDivElement>) => void;
    handleKeyDown_: (evt: React.KeyboardEvent<HTMLDivElement>) => void;
    handleTransitionEnd_: (evt: React.TransitionEvent<HTMLDivElement>) => void;
    render(): JSX.Element;
}
export {};
