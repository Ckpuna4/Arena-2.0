import * as React from 'react';
import ListItem, { ListItemProps } from './ListItem';
import ListItemGraphic from './ListItemGraphic';
import ListItemText from './ListItemText';
import ListItemMeta from './ListItemMeta';
import ListDivider from './ListDivider';
import ListGroup from './ListGroup';
import ListGroupSubheader from './ListGroupSubheader';
export interface ListProps<T> extends React.HTMLProps<HTMLElement> {
    className: string;
    nonInteractive: boolean;
    dense: boolean;
    avatarList: boolean;
    twoLine: boolean;
    singleSelection: boolean;
    selectedIndex: number;
    handleSelect: (selectedIndex: number) => void;
    wrapFocus: boolean;
    tag: string;
    children: ListItem<T> | ListItem<T>[] | React.ReactNode;
}
interface ListState {
    focusListItemAtIndex: number;
    followHrefAtIndex: number;
    toggleCheckboxAtIndex: number;
    listItemAttributes: {
        [N: number]: any;
    };
    listItemClassNames: {
        [N: number]: string[];
    };
    listItemChildrenTabIndex: {
        [N: number]: number;
    };
}
export default class List<T extends HTMLElement = HTMLElement> extends React.Component<ListProps<T>, ListState> {
    listItemCount: number;
    foundation: any;
    state: ListState;
    static defaultProps: Partial<ListProps<HTMLElement>>;
    componentDidMount(): void;
    componentDidUpdate(prevProps: ListProps<T>): void;
    componentWillUnmount(): void;
    readonly classes: string;
    readonly adapter: {
        getListItemCount: () => number;
        getFocusedElementIndex: () => number;
        setAttributeForElementIndex: (index: number, attr: string, value: string) => void;
        removeAttributeForElementIndex: (index: number, attr: string) => void;
        addClassForElementIndex: (index: number, className: string) => void;
        removeClassForElementIndex: (index: number, className: string) => void;
        setTabIndexForListItemChildren: (listItemIndex: number, tabIndexValue: number) => void;
        focusItemAtIndex: (index: number) => void;
        followHref: (index: number) => void;
        toggleCheckbox: (index: number) => void;
    };
    handleKeyDown: (e: React.KeyboardEvent<any>, index: number) => void;
    handleClick: (e: React.MouseEvent<any>, index: number) => void;
    handleFocus: (e: React.FocusEvent<Element>, index: number) => void;
    handleBlur: (e: React.FocusEvent<Element>, index: number) => void;
    render(): JSX.Element;
    renderChild: (child: string | number | React.ReactElement<any> | React.ReactElement<ListItemProps<T>>) => string | number | React.ReactElement<any> | React.ReactElement<ListItemProps<T>>;
    renderListItem: (listItem: React.ReactElement<ListItemProps<T>>, index: number) => React.ReactElement<ListItemProps<T>>;
}
export { ListItem, ListItemGraphic, ListItemText, ListItemMeta, ListDivider, ListGroup, ListGroupSubheader, ListItemProps, };
