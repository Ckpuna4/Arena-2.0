import * as React from 'react';
import TabScroller from '@material/react-tab-scroller';
import Tab, { TabProps } from '@material/react-tab';
// @ts-ignore
import { MDCTabBarFoundation } from '@material/tab-bar/dist/mdc.tabBar';
export interface TabBarProps extends React.HTMLAttributes<HTMLDivElement> {
    indexInView?: number;
    activeIndex: number;
    handleActiveIndexUpdate?: (index: number) => void;
    className?: string;
    isRtl?: boolean;
    children: React.ReactElement<TabProps> | React.ReactElement<TabProps>[];
}
interface TabBarState {
    previousActiveIndex: number;
}
declare class TabBar extends React.Component<TabBarProps, TabBarState> {
    tabBarRef: React.RefObject<HTMLDivElement>;
    tabScrollerRef: React.RefObject<TabScroller>;
    tabList: Tab[];
    foundation?: MDCTabBarFoundation;
    constructor(props: TabBarProps);
    static defaultProps: Partial<TabBarProps>;
    componentDidMount(): void;
    componentDidUpdate(prevProps: TabBarProps): void;
    componentWillUnmount(): void;
    readonly classes: string;
    readonly adapter: {
        scrollTo: (scrollX: number) => void;
        incrementScroll: (scrollXIncrement: number) => void;
        getScrollPosition: () => any;
        getScrollContentWidth: () => void;
        getOffsetWidth: () => number | undefined;
        isRTL: () => boolean;
        setActiveTab: (index: number) => void;
        activateTabAtIndex: (index: number, clientRect: ClientRect) => void;
        deactivateTabAtIndex: (index: number) => void;
        focusTabAtIndex: (index: number) => void;
        getTabIndicatorClientRectAtIndex: (index: number) => ClientRect | undefined;
        getTabDimensionsAtIndex: (index: number) => any;
        getPreviousActiveTabIndex: () => number;
        getFocusedTabIndex: () => number;
        getIndexOfTab: (tabToFind: Tab) => number;
        getTabListLength: () => number;
    };
    pushToTabList: (el: Tab) => void;
    onKeyDown: (e: React.KeyboardEvent<HTMLDivElement>) => void;
    onClickTab: (e: React.MouseEvent<HTMLButtonElement>, index: number, onClick?: ((event: React.MouseEvent<HTMLButtonElement>) => void) | undefined) => void;
    render(): JSX.Element;
    renderTab: (tab: React.ReactElement<TabProps>, index: number) => React.ReactElement<TabProps>;
}
export { Tab };
export default TabBar;
